plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18, 6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id "net.darkhax.curseforgegradle" version "1.0.7"
}

base {
    archivesName = "${fileName}-${mc_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(project.properties.javaVersion)

jarJar.enable()

minecraft {
    mappings channel: 'parchment', version: project.properties.parchment_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    enableEclipsePrepareRuns = true
    copyIdeResources = true
    generateRunFolders = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        client = {
        }
        server = {
            args "--nogui"
        }
        data = {
            workingDirectory project.file('run-data')
            args '--mod', "${modid}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        // Curios
        url "https://maven.theillusivec4.top"
        content {
            includeGroupByRegex "top\\.theillusivec4.*"
        }
    }
    maven {
        url "https://maven.k-4u.nl"
        content {
            includeGroup "mcjty.theoneprobe"
        }
    }
    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup "vazkii.patchouli"
            includeGroupByRegex "net\\.darkhax.*"
            includeGroupByRegex "com\\.blamejared.*"
            includeGroup "org.openzen.zencode"
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://maven.shadowsoffire.dev/releases"
        content {
            includeGroup "dev.shadowsoffire"
        }
    }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://jitpack.io' }
    maven {
        name = "Iron's Maven - Release"
        url = "https://code.redspace.io/releases"
    }

    maven {
        name = "Iron's Maven - Snapshots"
        url = "https://code.redspace.io/snapshots"
    }
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${forge_version}"

    // Mixin
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }

    // Required Deps
    implementation fg.deobf("dev.shadowsoffire:Placebo:${mc_version}-${placebo_version}")
    implementation fg.deobf("dev.shadowsoffire:ApothicAttributes:${mc_version}-${attributeslib_version}")
    implementation fg.deobf("dev.shadowsoffire:Apotheosis:${mc_version}-${apotheosis_version}")
    runtimeOnly fg.deobf("curse.maven:additional-attributes-986624:5668766")
    // TipsyLib, disabled for now due to null level issues
    // runtimeOnly fg.deobf("curse.maven:tipsylib-880879:5426410")

    // Dev Env Mods
    implementation fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    implementation fg.deobf("curse.maven:jade-324717:${jade_file_id}")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")


    // Optional Integrations
    compileOnly fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${irons_spells_version}:api")
    runtimeOnly fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${irons_spells_version}")

    runtimeOnly fg.deobf("curse.maven:alexs-caves-924854:5633305")
    runtimeOnly fg.deobf("curse.maven:citadel-331936:5633260")

    runtimeOnly fg.deobf("curse.maven:galosphere-631098:4983871")

    runtimeOnly fg.deobf("curse.maven:delightful-637529:5654704")

    runtimeOnly fg.deobf("curse.maven:farmers-delight-398521:5051242")



    // Shared Libs
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${project.player_anim_version}")
    runtimeOnly fg.deobf("curse.maven:geckolib-388172:5460309")
    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")
    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")
    runtimeOnly fg.deobf("curse.maven:attributefix-280510:4911084")

}

mixin {
    if (project.mixin.toBoolean()) {
        config "${modid}.mixins.json"
        add sourceSets.main, "${modid}.refmap.json"
    }
}

tasks.named('processResources', ProcessResources).configure {
    def replaceProperties = [
        modGroup: modGroup,
        modid: modid,
        version: version,
        modName: modName,
        author: author,
        desc: desc,
        mcVersion: mc_version,
        javaVersion: javaVersion,
        forgeVersion: forge_version
    ]

    inputs.properties replaceProperties

    def resourceTargets = [
        'META-INF/mods.toml',
        'pack.mcmeta'
    ]

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    filesMatching('mixins.json') {
        def mixinFiles = []
        def clientMixinFiles = []

        def path = "${project.projectDir}/src/main/java/${modGroup}/${modid}/mixin".replaceAll('\\.', '/')
        fileTree(path).visit { FileVisitDetails details ->
            def name = details.file.path.replace('\\', '/')
            name = name.substring(name.indexOf('mixin/') + 'mixin/'.length(), name.length())
            if(name.endsWith('.java')) {
                name = name.substring(0, name.length() - '.java'.length())
                if(name.startsWith('client')) {
                    clientMixinFiles.add(name)
                } else {
                    mixinFiles.add(name)
                }
            }
        }

        def mixins = ''
        def clientMixins = ''

        for (int i = 0; i < mixinFiles.size(); i++) {
            def name = mixinFiles[i]
            name = name.replaceAll('\\/', '.')
            mixins += '        "' + name + '"'
            if (i != mixinFiles.size() - 1) {
                mixins += ',\n'
            }
        }

        for (int i = 0; i < clientMixinFiles.size(); i++) {
            def name = clientMixinFiles[i]
            name = name.replaceAll('\\/', '.')
            clientMixins += '        "' + name + '"'
            if (i != clientMixinFiles.size() - 1) {
                clientMixins += ',\n'
            }
        }

        replaceProperties.put('mixins', mixins)
        replaceProperties.put('clientMixins', clientMixins)

        expand replaceProperties
        name "${modid}.mixins.json".toString()
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            "Specification-Title": project.fileName,
            "Specification-Vendor": project.author,
            "Specification-Version": "1.0", // We are version 1 of ourselves
            "Implementation-Title": project.fileName,
            "Implementation-Version": project.version,
            "Implementation-Vendor" : project.author,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": project.mixin.toBoolean() ? "${modid}.mixins.json" : ""
        ])
    }

    finalizedBy 'reobfJar'
}

java {
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

tasks.jarJar.configure {
    archiveClassifier = ""
    dependsOn('reobfJar')
}

reobf {
    jarJar {}
}

jar.finalizedBy('reobfJarJar')

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv("CF_TOKEN")

    def mainFile = upload(1055023, jar)
    mainFile.displayName = "Forge/Neoforge-${rootProject.version}+${mc_version}"
    mainFile.releaseType = "release"
    mainFile.changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    mainFile.changelogType = "markdown"
    forge_mod_loaders.split(", ").each {
        mainFile.addModLoader(it)
    }
    forge_game_versions.split(", ").each {
        mainFile.addGameVersion(it)
    }
}